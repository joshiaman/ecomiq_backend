c
Review.new(review_params.merge(user_id: @current_user.id, order_id: order.id))
c
Review.new(review_params.merge(user_id: @current_user.id, order_id: order.id))
c
Review.new(review_params.merge(user_id: @current_user.id, order_id: order.id))
c
Review.new(review_params.merge(user_id: @current_user.id, order_id: order.id))
@current_user
current_user
c
current_user
@current_user
Review.new(review_params.merge(user_id: @current_user.id, order_id: order.id))
review_params
order
c
user_params
c
user_params
c
      })
        }
          only: [:id, :quantity, :price]
          },
            product: { only: [:id, :name, :description, :price, :sku] }
          include: {
        order_items: {
render json: @orders.as_json(include: {
orders.includes(order_items: :product)
orders
c
!(orders.empty?)
orders.empty?
c
@current_user.orders.where(payment_status: Order::PAYMENT_STATUSES[:unpaid])
@current_user.orders.where(payment_status: "unpaid")
@current_user.orders
@current_user
Order::PAYMENT_STATUSES[:unpaid]
Order::PAYMENT_STATUSES
c
data
c
data["id"]
data["id]
data
response
c
order.create
c
order
c
      )
        ENV['PAYPAL_CLIENT_ID'], ENV['PAYPAL_CLIENT_SECRET']
PayPalCheckoutSdk::SandboxEnvironment.new(
 response = PaypalClient.client.execute(request)
c
 response = PaypalClient.client.execute(request)
c
C
response = PaypalClient.client.execute(request)
c
response = PaypalClient.client.execute(request)
c
response = PaypalClient.client.execute(request)
request
c
payment.process_paypal_payment
 payment = @order.build_payment(amount: @order.total_price)
@order
c
@order
payment
order_id
c
product.decrement(:sku,"1")
product.decrement(:sku,1)
product.decrement("sku",1)
product.decrement(sku,1)
product.decrement(:sku,1)
product
c
product.decrement!(:sku,1)
quantity
c
order_params
@current_user.orders.build(order_params)
@current_user.orders.new(order_params)
c
@current_user.orders.new(order_params)
@current_user.orders.build(order_params)
@current_users.orders.build(order_params)
@current_users.orders
@current_user
@current_iser
c
user.attributes.except("first_name")
user.except("first_name")
user.except(:first_name)
user
c
user
c
user
c
continue
continuje
params[:user][:email]
params[:user].email
params[:user]
params
user
