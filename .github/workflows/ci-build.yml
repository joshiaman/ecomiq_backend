name: Build, Test, and Push to AWS ECR

on:
  push:
    branches:
      - master  # Runs only when pushing to master

jobs:
  test:
    name: Run RSpec Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.5' # adjust if needed

      - name: Install dependencies
        run: |
          gem install bundler
          bundle install

      - name: Run tests with JUnit output
        run: |
          mkdir -p tmp/rspec
          bundle exec rspec --format RspecJunitFormatter --out tmp/rspec/rspec.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: rspec-results
          path: tmp/rspec/rspec.xml

  sonarqube:
    name: SonarQube Scan
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: rspec-results

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=ecomiq_backend
            -Dsonar.organization=joshiaman
            -Dsonar.sources=.
            -Dsonar.tests=spec
            -Dsonar.test.inclusions=spec/**/*.rb
            -Dsonar.ruby.coverage.reportPaths=coverage/.resultset.json
            -Dsonar.ruby.coveragePlugin=ruby
            -Dsonar.ruby.rspec.reportPaths=tmp/rspec/rspec.xml
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build-and-push:
    name: Build, Test, and Push Docker Image to AWS ECR
    needs: sonarqube
    runs-on: ubuntu-latest

    steps:
      # Checkout the repo
      - name: Checkout Code
        uses: actions/checkout@v4

      # Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Authenticate to AWS ECR
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Authenticate to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REPOSITORY }}

      # Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t ecommerce-backend:latest .

      # Tag the image for AWS ECR
      - name: Tag Docker Image
        run: |
          docker tag ecommerce-backend:latest ${{ secrets.AWS_ECR_REPOSITORY }}:latest

      # Push Image to AWS ECR
      - name: Push Image to AWS ECR
        run: |
          docker push ${{ secrets.AWS_ECR_REPOSITORY }}:latest
      
      # Scan Docker Image with Trivy
      - name: Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.AWS_ECR_REPOSITORY }}:latest
          format: table
          exit-code: 1
          severity: CRITICAL
          ignore-unfixed: true
          trivy-config: .trivyignore.yaml

      # Sign Docker Image with Cosign
      - name: Install Cosign
        run: |
          curl -sSL -o cosign https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64
          chmod +x cosign
          sudo mv cosign /usr/local/bin/cosign

      - name: Sign Docker image with Cosign
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          cosign sign --yes ${{ secrets.AWS_ECR_REPOSITORY }}:latest
        

      # Extract the repository name from the secret URI
      - name: List Images in AWS ECR
        run: |
          ECR_REPOSITORY_NAME="$(basename "${{ secrets.AWS_ECR_REPOSITORY }}")"
          aws ecr list-images --repository-name $ECR_REPOSITORY_NAME
  
  deploy-to-ecs:
    name: Deploy to ECS
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ca-central-1
    
    - name: Install Cosign
      run: |
        curl -sSL -o cosign https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64
        chmod +x cosign
        sudo mv cosign /usr/local/bin/cosign
  
    - name: Verify Docker image using Cosign
      env:
        COSIGN_EXPERIMENTAL: "true"
      run: |
        cosign verify --key github ${{ secrets.AWS_ECR_REPOSITORY }}:latest

    - name: Deploy to ECS
      run: |
        ecs_cluster_name="ecomiq"
        ecs_service_name="ecomiq-backend"
        image_uri="${{ secrets.AWS_ECR_REPOSITORY }}:latest"
        
        # Get the current task definition to use the existing one
        current_task_definition=$(aws ecs describe-services --cluster $ecs_cluster_name --services $ecs_service_name --query "services[0].taskDefinition" --output text)

        # Update ECS service with the latest image without changing the task definition
        echo "Updating ECS service to use the latest image..."
        aws ecs update-service --cluster $ecs_cluster_name --service $ecs_service_name --task-definition $current_task_definition --force-new-deployment

