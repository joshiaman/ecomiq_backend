name: Build, Test, and Push to AWS ECR

on:
  push:
    branches:
      - master  # Runs only when pushing to master

jobs:
  infra-deployment:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest

    env:
      PULUMI_STACK: prod
      AWS_REGION: ca-central-1

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Pulumi
        uses: pulumi/actions@v4
        with:
          pulumi-version: "latest"

      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Dependencies
        run: npm install -g @pulumi/pulumi

      - name: Pulumi Login
        run: pulumi login
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

      - name: Select Pulumi Stack
        run: pulumi stack select $PULUMI_STACK
        working-directory: ./infra

      - name: Preview Changes
        run: pulumi preview
        working-directory: ./infra

      - name: Deploy Stack
        run: pulumi up --yes
        working-directory: ./infra

  test:
    name: Run RSpec Tests
    needs: infra-deployment
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.5' # adjust if needed

      - name: Install dependencies
        run: |
          gem install bundler
          bundle install

      - name: Run tests with JUnit output
        run: |
          mkdir -p tmp/rspec
          bundle exec rspec --format RspecJunitFormatter --out tmp/rspec/rspec.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: rspec-results
          path: tmp/rspec/rspec.xml

  sonarqube:
    name: SonarQube Scan
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: rspec-results

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=ecomiq_backend
            -Dsonar.organization=joshiaman
            -Dsonar.sources=.
            -Dsonar.tests=spec
            -Dsonar.test.inclusions=spec/**/*.rb
            -Dsonar.ruby.coverage.reportPaths=coverage/.resultset.json
            -Dsonar.ruby.coveragePlugin=ruby
            -Dsonar.ruby.rspec.reportPaths=tmp/rspec/rspec.xml
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build-and-push:
    name: Build, Test, and Push Docker Image to AWS ECR
    needs: sonarqube
    runs-on: ubuntu-latest

    steps:
      # Checkout the repo
      - name: Checkout Code
        uses: actions/checkout@v4

      # Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Authenticate to AWS ECR
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Authenticate to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REPOSITORY }}

      # Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t ecommerce-backend:latest .

      # Tag the image for AWS ECR
      - name: Tag Docker Image
        run: |
          docker tag ecommerce-backend:latest ${{ secrets.AWS_ECR_REPOSITORY }}:latest

      # Push Image to AWS ECR
      - name: Push Image to AWS ECR
        run: |
          docker push ${{ secrets.AWS_ECR_REPOSITORY }}:latest
      
      # Scan Docker Image with Trivy
      - name: Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.AWS_ECR_REPOSITORY }}:latest
          format: table
          exit-code: 0
          severity: CRITICAL
          ignore-unfixed: true
          trivy-config: .trivyignore.yaml

      # Sign Docker Image with Cosign
      - name: Install Cosign
        run: |
          curl -sSL -o cosign https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64
          chmod +x cosign
          sudo mv cosign /usr/local/bin/cosign

      - name: Sign Docker Image with Cosign
        env:
          COSIGN_EXPERIMENTAL: "1"
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key
          cosign sign --yes --key cosign.key ${{ secrets.AWS_ECR_REPOSITORY }}:latest
        

      # Extract the repository name from the secret URI
      - name: List Images in AWS ECR
        run: |
          ECR_REPOSITORY_NAME="$(basename "${{ secrets.AWS_ECR_REPOSITORY }}")"
          aws ecr list-images --repository-name $ECR_REPOSITORY_NAME
  
  deploy-to-ecs:
    name: Deploy to ECS
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ca-central-1

    - name: Docker login to ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
          | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REPOSITORY }}
    
    - name: Install Cosign
      run: |
        curl -sSL -o cosign https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64
        chmod +x cosign
        sudo mv cosign /usr/local/bin/cosign

    - name: Verify Docker Image with Cosign
      run: |
        echo "${{ secrets.COSIGN_PUBLIC_KEY }}" > cosign.pub
        cosign verify --key cosign.pub ${{ secrets.AWS_ECR_REPOSITORY }}:latest  
    
    - name: Install jq
      run: sudo apt-get install -y jq

    - name: Deploy to ECS with Updated Task Definition
      run: |
        ecs_cluster_name="ecomiq-cluster"
        ecs_service_name="ecomiq-backend"
        container_name="backend"
        image_uri="${{ secrets.AWS_ECR_REPOSITORY }}:latest"
    
        echo "Fetching current task definition..."
        current_task_def_arn=$(aws ecs describe-services \
          --cluster $ecs_cluster_name \
          --services $ecs_service_name \
          --query "services[0].taskDefinition" \
          --output text)
    
        echo "Getting task definition JSON..."
        task_def_json=$(aws ecs describe-task-definition \
          --task-definition $current_task_def_arn \
          --query "taskDefinition" \
          --output json)
    
        echo "Creating new task definition revision with updated image..."
        new_task_def=$(echo "$task_def_json" | jq \
          --arg IMAGE "$image_uri" \
          --arg CONTAINER_NAME "$container_name" \
          'del(.status, .taskDefinitionArn, .revision, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)
          | .containerDefinitions |= map(if .name == $CONTAINER_NAME then .image = $IMAGE else . end)')
    
        new_task_def_arn=$(aws ecs register-task-definition \
          --cli-input-json "$new_task_def" \
          --query "taskDefinition.taskDefinitionArn" \
          --output text)
    
        echo "Updating ECS service with new task definition revision..."
        aws ecs update-service \
          --cluster $ecs_cluster_name \
          --service $ecs_service_name \
          --task-definition $new_task_def_arn \
          --force-new-deployment
    
    
    

